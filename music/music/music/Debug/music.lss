
music.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000792  00000826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800180  00800180  000008a6  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  000010c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b7  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000479  00000000  00000000  00002287  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000806  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000632  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fe  00000000  00000000  000037d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 38       	cpi	r26, 0x80	; 128
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 38       	cpi	r26, 0x86	; 134
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  c6:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <load_songs>:
	load_songs();
	oi_play_song(Ode2Joy);
}


void load_songs() {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	ca 57       	subi	r28, 0x7A	; 122
  d8:	d0 40       	sbci	r29, 0x00	; 0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	unsigned char mario2Duration[65] = {18, 18, 18, 18, 18, 18,  9,  9, 18, 18, 45,  9, 54, 54, 54, 9,  9,  9,  9,  9,  9, 54, 36, 18, 54, 45,  9, 54, 54, 54,  9,  9,  9,  9,  9,  9, 54, 36, 18, 54, 45,  9, 54, 54, 54, 18, 18,  9,  9, 54, 54, 54, 18, 18,  9,  9, 54, 18, 18, 18,  9,  9, 27,  9, 54 };
	oi_load_song(MARIO_UNDERWATER, mario2NumNotes, mario2Notes, mario2Duration);
	*/
	
	unsigned char Ode2JoyNumNotes = 61;
	unsigned char Ode2JoyNotes[61]    = {40,40,41,43,43,41,40,38,36,36,38,40,40,38,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36,38,38,40,36,38,40,41,40,36,38,40,41,40,38,36,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36};
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	e1 f7       	brne	.-8      	; 0xee <load_songs+0x20>
	unsigned char Ode2JoyDuration[61] = {18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18, 9, 9,18,18,18, 9, 9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12};
  f6:	de 01       	movw	r26, r28
  f8:	de 96       	adiw	r26, 0x3e	; 62
  fa:	ed e3       	ldi	r30, 0x3D	; 61
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	8d e3       	ldi	r24, 0x3D	; 61
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	81 50       	subi	r24, 0x01	; 1
 106:	e1 f7       	brne	.-8      	; 0x100 <load_songs+0x32>
 108:	fe 01       	movw	r30, r28
 10a:	31 96       	adiw	r30, 0x01	; 1
	load_songs();
	oi_play_song(Ode2Joy);
}


void load_songs() {
 10c:	ce 01       	movw	r24, r28
 10e:	ce 96       	adiw	r24, 0x3e	; 62
	unsigned char Ode2JoyNumNotes = 61;
	unsigned char Ode2JoyNotes[61]    = {40,40,41,43,43,41,40,38,36,36,38,40,40,38,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36,38,38,40,36,38,40,41,40,36,38,40,41,40,38,36,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36};
	unsigned char Ode2JoyDuration[61] = {18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18, 9, 9,18,18,18, 9, 9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12};
	for (int i=0; i<61; i++)
	{
		Ode2JoyNotes[i] += 20;
 110:	20 81       	ld	r18, Z
 112:	2c 5e       	subi	r18, 0xEC	; 236
 114:	21 93       	st	Z+, r18
	*/
	
	unsigned char Ode2JoyNumNotes = 61;
	unsigned char Ode2JoyNotes[61]    = {40,40,41,43,43,41,40,38,36,36,38,40,40,38,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36,38,38,40,36,38,40,41,40,36,38,40,41,40,38,36,38,40,40,41,43,43,41,40,38,36,36,38,40,38,36,36};
	unsigned char Ode2JoyDuration[61] = {18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12,18,18,18,18,18, 9, 9,18,18,18, 9, 9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,30,12,12};
	for (int i=0; i<61; i++)
 116:	e8 17       	cp	r30, r24
 118:	f9 07       	cpc	r31, r25
 11a:	d1 f7       	brne	.-12     	; 0x110 <load_songs+0x42>
	{
		Ode2JoyNotes[i] += 20;
	}
	oi_load_song(Ode2Joy, Ode2JoyNumNotes, Ode2JoyNotes, Ode2JoyDuration);
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	6d e3       	ldi	r22, 0x3D	; 61
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	ae 01       	movw	r20, r28
 126:	4f 5f       	subi	r20, 0xFF	; 255
 128:	5f 4f       	sbci	r21, 0xFF	; 255
 12a:	9e 01       	movw	r18, r28
 12c:	22 5c       	subi	r18, 0xC2	; 194
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	0e 94 d6 00 	call	0x1ac	; 0x1ac <oi_load_song>
	
	
	
 134:	c6 58       	subi	r28, 0x86	; 134
 136:	df 4f       	sbci	r29, 0xFF	; 255
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:
 *
 */

void main()
{
	oi_t* sensor = oi_alloc();
 148:	0e 94 af 00 	call	0x15e	; 0x15e <oi_alloc>
	oi_init(sensor);
 14c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <oi_init>
	
	load_songs();
 150:	0e 94 67 00 	call	0xce	; 0xce <load_songs>
	oi_play_song(Ode2Joy);
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 cc 00 	call	0x198	; 0x198 <oi_play_song>
}
 15c:	08 95       	ret

0000015e <oi_alloc>:
#include "util.h"
#include "open_interface.h"

/// Allocate memory for a the sensor data
oi_t* oi_alloc() {
	return calloc(1, sizeof(oi_t));
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	64 e3       	ldi	r22, 0x34	; 52
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 73 02 	call	0x4e6	; 0x4e6 <calloc>
}
 16a:	08 95       	ret

0000016c <oi_free>:

/// Free memory from a pointer to the sensor data struct
void oi_free(oi_t *self) {
	free(self);
 16c:	0e 94 27 03 	call	0x64e	; 0x64e <free>
}
 170:	08 95       	ret

00000172 <oi_byte_tx>:


// Transmit a byte of data over the serial connection to the Create
void oi_byte_tx(unsigned char value) {
	// Wait until the transmit buffer is empty
	while (!(UCSR1A & (1 << UDRE)));
 172:	eb e9       	ldi	r30, 0x9B	; 155
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	95 ff       	sbrs	r25, 5
 17a:	fd cf       	rjmp	.-6      	; 0x176 <oi_byte_tx+0x4>

	UDR1 = value;
 17c:	80 93 9c 00 	sts	0x009C, r24
}
 180:	08 95       	ret

00000182 <go_charge>:
/// Runs default go charge program; robot will search for dock
void go_charge(void) {
	char charging_state=0;
	
	//Calling demo that will cause Create to seek out home base
	oi_byte_tx(OI_OPCODE_MAX);
 182:	88 e8       	ldi	r24, 0x88	; 136
 184:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(0x01);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	
	//Control is returned immediately, so need to check for docking status
	DDRB &= ~0x80; //Setting pin7 to input
 18e:	bf 98       	cbi	0x17, 7	; 23
	PORTB |= 0x80; //Setting pullup on pin7
 190:	c7 9a       	sbi	0x18, 7	; 24
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
 192:	b7 9b       	sbis	0x16, 7	; 22
 194:	fe cf       	rjmp	.-4      	; 0x192 <go_charge+0x10>
}
 196:	08 95       	ret

00000198 <oi_play_song>:
	}
}


/// Plays a given song; use oi_load_song(...) first
void oi_play_song(int index){
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	oi_byte_tx(OI_OPCODE_PLAY);
 19c:	8d e8       	ldi	r24, 0x8D	; 141
 19e:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(index);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <oi_load_song>:
	oi_byte_tx(left_wheel& 0xff);
}


/// Loads a song onto the iRobot Create
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
 1ac:	bf 92       	push	r11
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	08 2f       	mov	r16, r24
 1c0:	6b 01       	movw	r12, r22
 1c2:	c4 2f       	mov	r28, r20
 1c4:	e5 2e       	mov	r14, r21
 1c6:	d2 2f       	mov	r29, r18
 1c8:	b3 2e       	mov	r11, r19
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
 1ca:	8c e8       	ldi	r24, 0x8C	; 140
 1cc:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(song_index);
 1d0:	80 2f       	mov	r24, r16
 1d2:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(num_notes);
 1d6:	8c 2d       	mov	r24, r12
 1d8:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	for (i=0;i<num_notes;i++) {
 1dc:	1c 14       	cp	r1, r12
 1de:	1d 04       	cpc	r1, r13
 1e0:	a4 f4       	brge	.+40     	; 0x20a <oi_load_song+0x5e>
 1e2:	0c 2f       	mov	r16, r28
 1e4:	1e 2d       	mov	r17, r14
 1e6:	ed 2e       	mov	r14, r29
 1e8:	fb 2c       	mov	r15, r11
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
		oi_byte_tx(notes[i]);
 1ee:	f8 01       	movw	r30, r16
 1f0:	81 91       	ld	r24, Z+
 1f2:	8f 01       	movw	r16, r30
 1f4:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
		oi_byte_tx(duration[i]);
 1f8:	f7 01       	movw	r30, r14
 1fa:	81 91       	ld	r24, Z+
 1fc:	7f 01       	movw	r14, r30
 1fe:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
	oi_byte_tx(song_index);
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	cc 15       	cp	r28, r12
 206:	dd 05       	cpc	r29, r13
 208:	91 f7       	brne	.-28     	; 0x1ee <oi_load_song+0x42>
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	bf 90       	pop	r11
 21c:	08 95       	ret

0000021e <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	18 2f       	mov	r17, r24
 228:	09 2f       	mov	r16, r25
 22a:	c6 2f       	mov	r28, r22
 22c:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
 22e:	81 e9       	ldi	r24, 0x91	; 145
 230:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
 234:	80 2f       	mov	r24, r16
 236:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
 23a:	81 2f       	mov	r24, r17
 23c:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
 240:	8d 2f       	mov	r24, r29
 242:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
 246:	8c 2f       	mov	r24, r28
 248:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	18 2f       	mov	r17, r24
 260:	06 2f       	mov	r16, r22
 262:	d4 2f       	mov	r29, r20
 264:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
 266:	8b e8       	ldi	r24, 0x8B	; 139
 268:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
 26c:	00 23       	and	r16, r16
 26e:	39 f0       	breq	.+14     	; 0x27e <oi_set_leds+0x28>
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	11 23       	and	r17, r17
 276:	29 f4       	brne	.+10     	; 0x282 <oi_set_leds+0x2c>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <oi_set_leds+0x2c>
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
 286:	8d 2f       	mov	r24, r29
 288:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
 29c:	eb e9       	ldi	r30, 0x9B	; 155
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <oi_byte_rx+0x4>

	return UDR1;
 2a6:	80 91 9c 00 	lds	r24, 0x009C
}
 2aa:	08 95       	ret

000002ac <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 2ba:	80 91 9b 00 	lds	r24, 0x009B
 2be:	88 23       	and	r24, r24
 2c0:	44 f4       	brge	.+16     	; 0x2d2 <oi_update+0x26>
		i = UDR1;
 2c2:	ac e9       	ldi	r26, 0x9C	; 156
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 2c6:	eb e9       	ldi	r30, 0x9B	; 155
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
 2ca:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	e4 f3       	brlt	.-8      	; 0x2ca <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
 2d2:	8e e8       	ldi	r24, 0x8E	; 142
 2d4:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
 2de:	e7 01       	movw	r28, r14
 2e0:	e4 96       	adiw	r28, 0x34	; 52
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
 2e2:	87 01       	movw	r16, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
 2e4:	0e 94 4e 01 	call	0x29c	; 0x29c <oi_byte_rx>
 2e8:	f8 01       	movw	r30, r16
 2ea:	81 93       	st	Z+, r24
 2ec:	8f 01       	movw	r16, r30
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
 2ee:	ec 17       	cp	r30, r28
 2f0:	fd 07       	cpc	r31, r29
 2f2:	c1 f7       	brne	.-16     	; 0x2e4 <oi_update+0x38>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
 2f4:	f7 01       	movw	r30, r14
 2f6:	94 85       	ldd	r25, Z+12	; 0x0c
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	25 85       	ldd	r18, Z+13	; 0x0d
 2fc:	82 0f       	add	r24, r18
 2fe:	91 1d       	adc	r25, r1
 300:	95 87       	std	Z+13, r25	; 0x0d
 302:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
 304:	96 85       	ldd	r25, Z+14	; 0x0e
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	27 85       	ldd	r18, Z+15	; 0x0f
 30a:	82 0f       	add	r24, r18
 30c:	91 1d       	adc	r25, r1
 30e:	97 87       	std	Z+15, r25	; 0x0f
 310:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
 312:	91 89       	ldd	r25, Z+17	; 0x11
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	22 89       	ldd	r18, Z+18	; 0x12
 318:	82 0f       	add	r24, r18
 31a:	91 1d       	adc	r25, r1
 31c:	92 8b       	std	Z+18, r25	; 0x12
 31e:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
 320:	93 89       	ldd	r25, Z+19	; 0x13
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	24 89       	ldd	r18, Z+20	; 0x14
 326:	82 0f       	add	r24, r18
 328:	91 1d       	adc	r25, r1
 32a:	94 8b       	std	Z+20, r25	; 0x14
 32c:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
 32e:	96 89       	ldd	r25, Z+22	; 0x16
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	27 89       	ldd	r18, Z+23	; 0x17
 334:	82 0f       	add	r24, r18
 336:	91 1d       	adc	r25, r1
 338:	97 8b       	std	Z+23, r25	; 0x17
 33a:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
 33c:	90 8d       	ldd	r25, Z+24	; 0x18
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	21 8d       	ldd	r18, Z+25	; 0x19
 342:	82 0f       	add	r24, r18
 344:	91 1d       	adc	r25, r1
 346:	91 8f       	std	Z+25, r25	; 0x19
 348:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
 34a:	92 8d       	ldd	r25, Z+26	; 0x1a
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	23 8d       	ldd	r18, Z+27	; 0x1b
 350:	82 0f       	add	r24, r18
 352:	91 1d       	adc	r25, r1
 354:	93 8f       	std	Z+27, r25	; 0x1b
 356:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
 358:	94 8d       	ldd	r25, Z+28	; 0x1c
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	25 8d       	ldd	r18, Z+29	; 0x1d
 35e:	82 0f       	add	r24, r18
 360:	91 1d       	adc	r25, r1
 362:	95 8f       	std	Z+29, r25	; 0x1d
 364:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
 366:	96 8d       	ldd	r25, Z+30	; 0x1e
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	27 8d       	ldd	r18, Z+31	; 0x1f
 36c:	82 0f       	add	r24, r18
 36e:	91 1d       	adc	r25, r1
 370:	97 8f       	std	Z+31, r25	; 0x1f
 372:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
 374:	90 a1       	lds	r25, 0x40
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	21 a1       	lds	r18, 0x41
 37a:	82 0f       	add	r24, r18
 37c:	91 1d       	adc	r25, r1
 37e:	91 a3       	lds	r25, 0x51
 380:	80 a3       	lds	r24, 0x50
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
 382:	92 a1       	lds	r25, 0x42
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	23 a1       	lds	r18, 0x43
 388:	82 0f       	add	r24, r18
 38a:	91 1d       	adc	r25, r1
 38c:	93 a3       	lds	r25, 0x53
 38e:	82 a3       	lds	r24, 0x52
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
 390:	82 a5       	lds	r24, 0x62
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	31 a5       	lds	r19, 0x61
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	28 0f       	add	r18, r24
 39a:	39 1f       	adc	r19, r25
 39c:	36 a3       	lds	r19, 0x56
 39e:	25 a3       	lds	r18, 0x55
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
 3a0:	30 a9       	sts	0x40, r19
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	95 a7       	lds	r25, 0x75
 3aa:	84 a7       	lds	r24, 0x74
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
 3ac:	92 a9       	sts	0x42, r25
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	23 a9       	sts	0x43, r18
 3b2:	82 0f       	add	r24, r18
 3b4:	91 1d       	adc	r25, r1
 3b6:	97 a7       	lds	r25, 0x77
 3b8:	86 a7       	lds	r24, 0x76
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
 3ba:	94 a9       	sts	0x44, r25
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	25 a9       	sts	0x45, r18
 3c0:	82 0f       	add	r24, r18
 3c2:	91 1d       	adc	r25, r1
 3c4:	91 ab       	sts	0x51, r25
 3c6:	80 ab       	sts	0x50, r24
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
 3c8:	96 a9       	sts	0x46, r25
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	27 a9       	sts	0x47, r18
 3ce:	82 0f       	add	r24, r18
 3d0:	91 1d       	adc	r25, r1
 3d2:	93 ab       	sts	0x53, r25
 3d4:	82 ab       	sts	0x52, r24
	
	wait_ms(5); // reduces USART errors that occur when continuously transmitting/receiving
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 44 02 	call	0x488	; 0x488 <wait_ms>
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	08 95       	ret

000003ec <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	8c 01       	movw	r16, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
 3f6:	c9 e9       	ldi	r28, 0x99	; 153
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	88 83       	st	Y, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
 3fe:	88 e1       	ldi	r24, 0x18	; 24
 400:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
 410:	81 e8       	ldi	r24, 0x81	; 129
 412:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	wait_ms(100);
 41c:	84 e6       	ldi	r24, 0x64	; 100
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 44 02 	call	0x488	; 0x488 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
 424:	81 e2       	ldi	r24, 0x21	; 33
 426:	88 83       	st	Y, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
 428:	84 e8       	ldi	r24, 0x84	; 132
 42a:	0e 94 b9 00 	call	0x172	; 0x172 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	47 e0       	ldi	r20, 0x07	; 7
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	0e 94 2b 01 	call	0x256	; 0x256 <oi_set_leds>
	
	oi_update(self);
 43a:	c8 01       	movw	r24, r16
 43c:	0e 94 56 01 	call	0x2ac	; 0x2ac <oi_update>
	oi_update(self); // call twice to clear distance/angle
 440:	c8 01       	movw	r24, r16
 442:	0e 94 56 01 	call	0x2ac	; 0x2ac <oi_update>
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
 450:	10 92 81 01 	sts	0x0181, r1
 454:	10 92 80 01 	sts	0x0180, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
 458:	88 23       	and	r24, r24
 45a:	31 f4       	brne	.+12     	; 0x468 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
 45c:	8b e0       	ldi	r24, 0x0B	; 11
 45e:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 460:	87 b7       	in	r24, 0x37	; 55
 462:	80 68       	ori	r24, 0x80	; 128
 464:	87 bf       	out	0x37, r24	; 55
 466:	07 c0       	rjmp	.+14     	; 0x476 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	29 f4       	brne	.+10     	; 0x476 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
 46c:	89 e0       	ldi	r24, 0x09	; 9
 46e:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 470:	87 b7       	in	r24, 0x37	; 55
 472:	80 68       	ori	r24, 0x80	; 128
 474:	87 bf       	out	0x37, r24	; 55
	}
	sei();
 476:	78 94       	sei
}
 478:	08 95       	ret

0000047a <timer2_stop>:


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
 47a:	87 b7       	in	r24, 0x37	; 55
 47c:	8f 77       	andi	r24, 0x7F	; 127
 47e:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
 480:	85 b5       	in	r24, 0x25	; 37
 482:	8f 77       	andi	r24, 0x7F	; 127
 484:	85 bd       	out	0x25, r24	; 37
}
 486:	08 95       	ret

00000488 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
	OCR2=250; 				
 48e:	8a ef       	ldi	r24, 0xFA	; 250
 490:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
 492:	10 92 81 01 	sts	0x0181, r1
 496:	10 92 80 01 	sts	0x0180, r1
	timer2_start(0);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 28 02 	call	0x450	; 0x450 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
 4a0:	80 91 80 01 	lds	r24, 0x0180
 4a4:	90 91 81 01 	lds	r25, 0x0181
 4a8:	8c 17       	cp	r24, r28
 4aa:	9d 07       	cpc	r25, r29
 4ac:	c8 f3       	brcs	.-14     	; 0x4a0 <wait_ms+0x18>

	timer2_stop();
 4ae:	0e 94 3d 02 	call	0x47a	; 0x47a <timer2_stop>
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
	timer2_tick++;
 4c6:	80 91 80 01 	lds	r24, 0x0180
 4ca:	90 91 81 01 	lds	r25, 0x0181
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	90 93 81 01 	sts	0x0181, r25
 4d4:	80 93 80 01 	sts	0x0180, r24
}
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <calloc>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	68 9f       	mul	r22, r24
 4f0:	80 01       	movw	r16, r0
 4f2:	69 9f       	mul	r22, r25
 4f4:	10 0d       	add	r17, r0
 4f6:	78 9f       	mul	r23, r24
 4f8:	10 0d       	add	r17, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	c8 01       	movw	r24, r16
 4fe:	0e 94 91 02 	call	0x522	; 0x522 <malloc>
 502:	c8 2f       	mov	r28, r24
 504:	d9 2f       	mov	r29, r25
 506:	20 97       	sbiw	r28, 0x00	; 0
 508:	31 f0       	breq	.+12     	; 0x516 <calloc+0x30>
 50a:	8c 2f       	mov	r24, r28
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	a8 01       	movw	r20, r16
 512:	0e 94 c0 03 	call	0x780	; 0x780 <memset>
 516:	ce 01       	movw	r24, r28
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <malloc>:
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ac 01       	movw	r20, r24
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	91 05       	cpc	r25, r1
 52c:	10 f4       	brcc	.+4      	; 0x532 <malloc+0x10>
 52e:	42 e0       	ldi	r20, 0x02	; 2
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	e0 91 84 01 	lds	r30, 0x0184
 536:	f0 91 85 01 	lds	r31, 0x0185
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	a0 e0       	ldi	r26, 0x00	; 0
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	24 c0       	rjmp	.+72     	; 0x58c <malloc+0x6a>
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	84 17       	cp	r24, r20
 54a:	95 07       	cpc	r25, r21
 54c:	d0 f0       	brcs	.+52     	; 0x582 <malloc+0x60>
 54e:	84 17       	cp	r24, r20
 550:	95 07       	cpc	r25, r21
 552:	71 f4       	brne	.+28     	; 0x570 <malloc+0x4e>
 554:	82 81       	ldd	r24, Z+2	; 0x02
 556:	93 81       	ldd	r25, Z+3	; 0x03
 558:	10 97       	sbiw	r26, 0x00	; 0
 55a:	29 f0       	breq	.+10     	; 0x566 <malloc+0x44>
 55c:	13 96       	adiw	r26, 0x03	; 3
 55e:	9c 93       	st	X, r25
 560:	8e 93       	st	-X, r24
 562:	12 97       	sbiw	r26, 0x02	; 2
 564:	2c c0       	rjmp	.+88     	; 0x5be <malloc+0x9c>
 566:	90 93 85 01 	sts	0x0185, r25
 56a:	80 93 84 01 	sts	0x0184, r24
 56e:	27 c0       	rjmp	.+78     	; 0x5be <malloc+0x9c>
 570:	21 15       	cp	r18, r1
 572:	31 05       	cpc	r19, r1
 574:	19 f0       	breq	.+6      	; 0x57c <malloc+0x5a>
 576:	82 17       	cp	r24, r18
 578:	93 07       	cpc	r25, r19
 57a:	18 f4       	brcc	.+6      	; 0x582 <malloc+0x60>
 57c:	9c 01       	movw	r18, r24
 57e:	bd 01       	movw	r22, r26
 580:	ef 01       	movw	r28, r30
 582:	92 81       	ldd	r25, Z+2	; 0x02
 584:	83 81       	ldd	r24, Z+3	; 0x03
 586:	df 01       	movw	r26, r30
 588:	e9 2f       	mov	r30, r25
 58a:	f8 2f       	mov	r31, r24
 58c:	30 97       	sbiw	r30, 0x00	; 0
 58e:	d1 f6       	brne	.-76     	; 0x544 <malloc+0x22>
 590:	21 15       	cp	r18, r1
 592:	31 05       	cpc	r19, r1
 594:	f9 f0       	breq	.+62     	; 0x5d4 <malloc+0xb2>
 596:	c9 01       	movw	r24, r18
 598:	84 1b       	sub	r24, r20
 59a:	95 0b       	sbc	r25, r21
 59c:	84 30       	cpi	r24, 0x04	; 4
 59e:	91 05       	cpc	r25, r1
 5a0:	80 f4       	brcc	.+32     	; 0x5c2 <malloc+0xa0>
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	9b 81       	ldd	r25, Y+3	; 0x03
 5a6:	61 15       	cp	r22, r1
 5a8:	71 05       	cpc	r23, r1
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <malloc+0x92>
 5ac:	fb 01       	movw	r30, r22
 5ae:	93 83       	std	Z+3, r25	; 0x03
 5b0:	82 83       	std	Z+2, r24	; 0x02
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <malloc+0x9a>
 5b4:	90 93 85 01 	sts	0x0185, r25
 5b8:	80 93 84 01 	sts	0x0184, r24
 5bc:	fe 01       	movw	r30, r28
 5be:	32 96       	adiw	r30, 0x02	; 2
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <malloc+0x124>
 5c2:	fe 01       	movw	r30, r28
 5c4:	e8 0f       	add	r30, r24
 5c6:	f9 1f       	adc	r31, r25
 5c8:	41 93       	st	Z+, r20
 5ca:	51 93       	st	Z+, r21
 5cc:	02 97       	sbiw	r24, 0x02	; 2
 5ce:	99 83       	std	Y+1, r25	; 0x01
 5d0:	88 83       	st	Y, r24
 5d2:	39 c0       	rjmp	.+114    	; 0x646 <malloc+0x124>
 5d4:	80 91 82 01 	lds	r24, 0x0182
 5d8:	90 91 83 01 	lds	r25, 0x0183
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	41 f4       	brne	.+16     	; 0x5f0 <malloc+0xce>
 5e0:	80 91 7c 01 	lds	r24, 0x017C
 5e4:	90 91 7d 01 	lds	r25, 0x017D
 5e8:	90 93 83 01 	sts	0x0183, r25
 5ec:	80 93 82 01 	sts	0x0182, r24
 5f0:	20 91 7a 01 	lds	r18, 0x017A
 5f4:	30 91 7b 01 	lds	r19, 0x017B
 5f8:	21 15       	cp	r18, r1
 5fa:	31 05       	cpc	r19, r1
 5fc:	41 f4       	brne	.+16     	; 0x60e <malloc+0xec>
 5fe:	2d b7       	in	r18, 0x3d	; 61
 600:	3e b7       	in	r19, 0x3e	; 62
 602:	80 91 7e 01 	lds	r24, 0x017E
 606:	90 91 7f 01 	lds	r25, 0x017F
 60a:	28 1b       	sub	r18, r24
 60c:	39 0b       	sbc	r19, r25
 60e:	e0 91 82 01 	lds	r30, 0x0182
 612:	f0 91 83 01 	lds	r31, 0x0183
 616:	e2 17       	cp	r30, r18
 618:	f3 07       	cpc	r31, r19
 61a:	98 f4       	brcc	.+38     	; 0x642 <malloc+0x120>
 61c:	2e 1b       	sub	r18, r30
 61e:	3f 0b       	sbc	r19, r31
 620:	24 17       	cp	r18, r20
 622:	35 07       	cpc	r19, r21
 624:	70 f0       	brcs	.+28     	; 0x642 <malloc+0x120>
 626:	ca 01       	movw	r24, r20
 628:	02 96       	adiw	r24, 0x02	; 2
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	48 f0       	brcs	.+18     	; 0x642 <malloc+0x120>
 630:	8e 0f       	add	r24, r30
 632:	9f 1f       	adc	r25, r31
 634:	90 93 83 01 	sts	0x0183, r25
 638:	80 93 82 01 	sts	0x0182, r24
 63c:	41 93       	st	Z+, r20
 63e:	51 93       	st	Z+, r21
 640:	02 c0       	rjmp	.+4      	; 0x646 <malloc+0x124>
 642:	e0 e0       	ldi	r30, 0x00	; 0
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	cf 01       	movw	r24, r30
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <free>:
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	9c 01       	movw	r18, r24
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	09 f4       	brne	.+2      	; 0x65e <free+0x10>
 65c:	8c c0       	rjmp	.+280    	; 0x776 <free+0x128>
 65e:	dc 01       	movw	r26, r24
 660:	12 97       	sbiw	r26, 0x02	; 2
 662:	13 96       	adiw	r26, 0x03	; 3
 664:	1c 92       	st	X, r1
 666:	1e 92       	st	-X, r1
 668:	12 97       	sbiw	r26, 0x02	; 2
 66a:	60 91 84 01 	lds	r22, 0x0184
 66e:	70 91 85 01 	lds	r23, 0x0185
 672:	61 15       	cp	r22, r1
 674:	71 05       	cpc	r23, r1
 676:	89 f4       	brne	.+34     	; 0x69a <free+0x4c>
 678:	8d 91       	ld	r24, X+
 67a:	9c 91       	ld	r25, X
 67c:	11 97       	sbiw	r26, 0x01	; 1
 67e:	82 0f       	add	r24, r18
 680:	93 1f       	adc	r25, r19
 682:	20 91 82 01 	lds	r18, 0x0182
 686:	30 91 83 01 	lds	r19, 0x0183
 68a:	28 17       	cp	r18, r24
 68c:	39 07       	cpc	r19, r25
 68e:	69 f5       	brne	.+90     	; 0x6ea <free+0x9c>
 690:	b0 93 83 01 	sts	0x0183, r27
 694:	a0 93 82 01 	sts	0x0182, r26
 698:	6e c0       	rjmp	.+220    	; 0x776 <free+0x128>
 69a:	fb 01       	movw	r30, r22
 69c:	40 e0       	ldi	r20, 0x00	; 0
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <free+0x56>
 6a2:	fc 01       	movw	r30, r24
 6a4:	ea 17       	cp	r30, r26
 6a6:	fb 07       	cpc	r31, r27
 6a8:	30 f4       	brcc	.+12     	; 0x6b6 <free+0x68>
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	af 01       	movw	r20, r30
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	b9 f7       	brne	.-18     	; 0x6a2 <free+0x54>
 6b4:	1f c0       	rjmp	.+62     	; 0x6f4 <free+0xa6>
 6b6:	e9 01       	movw	r28, r18
 6b8:	22 97       	sbiw	r28, 0x02	; 2
 6ba:	fb 83       	std	Y+3, r31	; 0x03
 6bc:	ea 83       	std	Y+2, r30	; 0x02
 6be:	08 81       	ld	r16, Y
 6c0:	19 81       	ldd	r17, Y+1	; 0x01
 6c2:	c9 01       	movw	r24, r18
 6c4:	80 0f       	add	r24, r16
 6c6:	91 1f       	adc	r25, r17
 6c8:	8e 17       	cp	r24, r30
 6ca:	9f 07       	cpc	r25, r31
 6cc:	59 f4       	brne	.+22     	; 0x6e4 <free+0x96>
 6ce:	80 81       	ld	r24, Z
 6d0:	91 81       	ldd	r25, Z+1	; 0x01
 6d2:	80 0f       	add	r24, r16
 6d4:	91 1f       	adc	r25, r17
 6d6:	02 96       	adiw	r24, 0x02	; 2
 6d8:	99 83       	std	Y+1, r25	; 0x01
 6da:	88 83       	st	Y, r24
 6dc:	82 81       	ldd	r24, Z+2	; 0x02
 6de:	93 81       	ldd	r25, Z+3	; 0x03
 6e0:	9b 83       	std	Y+3, r25	; 0x03
 6e2:	8a 83       	std	Y+2, r24	; 0x02
 6e4:	41 15       	cp	r20, r1
 6e6:	51 05       	cpc	r21, r1
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <free+0xa6>
 6ea:	b0 93 85 01 	sts	0x0185, r27
 6ee:	a0 93 84 01 	sts	0x0184, r26
 6f2:	41 c0       	rjmp	.+130    	; 0x776 <free+0x128>
 6f4:	fa 01       	movw	r30, r20
 6f6:	b3 83       	std	Z+3, r27	; 0x03
 6f8:	a2 83       	std	Z+2, r26	; 0x02
 6fa:	c1 91       	ld	r28, Z+
 6fc:	d1 91       	ld	r29, Z+
 6fe:	ec 0f       	add	r30, r28
 700:	fd 1f       	adc	r31, r29
 702:	ae 17       	cp	r26, r30
 704:	bf 07       	cpc	r27, r31
 706:	81 f4       	brne	.+32     	; 0x728 <free+0xda>
 708:	f9 01       	movw	r30, r18
 70a:	92 91       	ld	r25, -Z
 70c:	82 91       	ld	r24, -Z
 70e:	8c 0f       	add	r24, r28
 710:	9d 1f       	adc	r25, r29
 712:	02 96       	adiw	r24, 0x02	; 2
 714:	da 01       	movw	r26, r20
 716:	11 96       	adiw	r26, 0x01	; 1
 718:	9c 93       	st	X, r25
 71a:	8e 93       	st	-X, r24
 71c:	82 81       	ldd	r24, Z+2	; 0x02
 71e:	93 81       	ldd	r25, Z+3	; 0x03
 720:	13 96       	adiw	r26, 0x03	; 3
 722:	9c 93       	st	X, r25
 724:	8e 93       	st	-X, r24
 726:	12 97       	sbiw	r26, 0x02	; 2
 728:	e0 e0       	ldi	r30, 0x00	; 0
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <free+0xe4>
 72e:	fb 01       	movw	r30, r22
 730:	bc 01       	movw	r22, r24
 732:	db 01       	movw	r26, r22
 734:	12 96       	adiw	r26, 0x02	; 2
 736:	8d 91       	ld	r24, X+
 738:	9c 91       	ld	r25, X
 73a:	13 97       	sbiw	r26, 0x03	; 3
 73c:	00 97       	sbiw	r24, 0x00	; 0
 73e:	b9 f7       	brne	.-18     	; 0x72e <free+0xe0>
 740:	cb 01       	movw	r24, r22
 742:	02 96       	adiw	r24, 0x02	; 2
 744:	2d 91       	ld	r18, X+
 746:	3c 91       	ld	r19, X
 748:	11 97       	sbiw	r26, 0x01	; 1
 74a:	82 0f       	add	r24, r18
 74c:	93 1f       	adc	r25, r19
 74e:	20 91 82 01 	lds	r18, 0x0182
 752:	30 91 83 01 	lds	r19, 0x0183
 756:	28 17       	cp	r18, r24
 758:	39 07       	cpc	r19, r25
 75a:	69 f4       	brne	.+26     	; 0x776 <free+0x128>
 75c:	30 97       	sbiw	r30, 0x00	; 0
 75e:	29 f4       	brne	.+10     	; 0x76a <free+0x11c>
 760:	10 92 85 01 	sts	0x0185, r1
 764:	10 92 84 01 	sts	0x0184, r1
 768:	02 c0       	rjmp	.+4      	; 0x76e <free+0x120>
 76a:	13 82       	std	Z+3, r1	; 0x03
 76c:	12 82       	std	Z+2, r1	; 0x02
 76e:	70 93 83 01 	sts	0x0183, r23
 772:	60 93 82 01 	sts	0x0182, r22
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <memset>:
 780:	dc 01       	movw	r26, r24
 782:	01 c0       	rjmp	.+2      	; 0x786 <memset+0x6>
 784:	6d 93       	st	X+, r22
 786:	41 50       	subi	r20, 0x01	; 1
 788:	50 40       	sbci	r21, 0x00	; 0
 78a:	e0 f7       	brcc	.-8      	; 0x784 <memset+0x4>
 78c:	08 95       	ret

0000078e <_exit>:
 78e:	f8 94       	cli

00000790 <__stop_program>:
 790:	ff cf       	rjmp	.-2      	; 0x790 <__stop_program>
